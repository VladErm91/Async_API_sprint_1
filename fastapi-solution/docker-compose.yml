services:
  app:
    command: /bin/sh -c "while sleep 1000; do :; done"
    build: .
    # command: uvicorn src.main:app --host 0.0.0.0 --port 8000
    container_name: app
    volumes:
      - ./src:/app/src:cached
    env_file:
      - .env
#    ports:
#      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      elastic:
        condition: service_healthy
      redis:
        condition: service_healthy

  db:
    image: postgres:16-alpine
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${DB_NAME:-movies_database}
      - POSTGRES_USER=${DB_USER:-app}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-123qwe}
      - POSTGRES_HOST=${DB_HOST:-db}
      - POSTGRES_PORT=${DB_PORT:-5432}
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema_design/dump_db.sql:/docker-entrypoint-initdb.d/dump_db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d movies_database"]
      interval: 10s
      timeout: 5s
      retries: 5

  elastic:
    image: elasticsearch:8.6.2
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ingest.geoip.downloader.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    expose:
      - "9200"
    volumes:
      - elasticsearch_data:/opt/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://elastic:9200/_cluster/health | grep -q '\\(green\\|yellow\\)'" ]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      db:
        condition: service_healthy

  redis:
    image: redis:latest
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    expose:
      - "6379"
    depends_on:
      db:
        condition: service_healthy

  etl_service:
    build: ./etl/postgres_to_es
    restart: always
    env_file:
      - ./etl/postgres_to_es/.env
    depends_on:
      db:
        condition: service_healthy
      elastic:
        condition: service_healthy
      redis:
        condition: service_healthy


volumes:
  postgres_data:
  elasticsearch_data:
